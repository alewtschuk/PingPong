## Project #: P1 PingPong

- Author: Alex Lewtschuk
- Class: CS455 
- Semester: Spring 2024

## Overview

In this project we worked with multithreading and socket connectios to make a server and client simulate a game of ping pong. The Servent was attempted as well.

## Compiling and Using

To run the code please use terminal and run the command `java pingpong.java <client|server> <serverHost> <port#>`. Make sure that the host is always `localhost`. 

Once the `server` has been set up open another terminal and with the same command specify `client` and the information for the server you just set up. This is how the `client` will connect.

To run the Servent version `cd` to `/Servent` and run the command: `java PingPongServent.java 1 5005 localhost 5006` then in another terminal run `java PingPongServent.java 2 5006 localhost 5005`. 

Please note the servent functionality of being both `server|client` is best demonstrated while running a third servent as there might be a bug with getting client multithreading to work I am not 100% sure. 

Please open a third terminal and run: `java pingpongservent.java 3 5007 localhost 5006`

## Testing Output
There was not much formal testing besides getting the server and client to connect and the game to run. The output of the game running is as follows.

Pingpong.java server view:
```
-----------Server Setup Begin-----------
Host: localhost
Port: 5005
Server: ready
Server: Started game #1
server: My result is: 1
 Their result is: 1
Result tied for client and server. Coin toss repeating
server: My result is: 0
 Their result is: 0
Result tied for client and server. Coin toss repeating
server: My result is: 0
 Their result is: 0
Result tied for client and server. Coin toss repeating
server: My result is: 1
 Their result is: 0
server: Coin toss terminated. I play as ping

server sent ping
server recieved: pong
server: ping
server recieved: pong
server: ping
```

Pingpong.java client view:
```
-----------Client Setup Begin-----------
Host: localhost
Port: 5005
Creating ball...
Ball created!
client: My result is: 1
 Their result is: 1
Result tied for client and server. Coin toss repeating
client: My result is: 0
 Their result is: 0
Result tied for client and server. Coin toss repeating
client: My result is: 0
 Their result is: 0
Result tied for client and server. Coin toss repeating
client: My result is: 0
 Their result is: 1
client: Coin toss terminated. I play as pong

client sent pong
client recieved: ping
client: pong
client recieved: ping
client: pong
```

Pingpong.java servent view (when playing as both client and server):
```
-----------Servent Setup Begin-----------

Servent2: up and running on port 5006 Alex-MBP/192.168.0.205
Servent 2: main thread Thread-0
Servent 2: Connecting to localhost:5005 as client
Servent2: Started game #1 as client 

Servent2: My result is: 0
 Their result is: 1
Servent2: Coin toss terminated. I play as pong

Servent2 sent pong
Game 1 as <Client>: Servent2 recieved: ping
Servent 2: Recieved connect from localhost [ 127.0.0.1,51429] 
Servent: Starting game #1 as server
Servent2: My result is: 0
 Their result is: 0
Result tied. Coin toss repeating
Servent2: My result is: 0
 Their result is: 0
Result tied. Coin toss repeating
Servent2: My result is: 1
 Their result is: 1
Result tied. Coin toss repeating
Servent2: My result is: 1
 Their result is: 0
Servent2: Coin toss terminated. I play as ping

Servent2 sent ping
Game 1 as <Server>: Servent2 recieved: pong
Game 1 as <Client>: Servent2: pong
Game 1 as <Client>: Servent2 recieved: ping
Game 1 as <Server>: Servent2 sent: ping
Game 1 as <Server>: Servent2 recieved: pong
Game 1 as <Client>: Servent2: pong
Game 1 as <Client>: Servent2 recieved: ping
```
## Reflection

This project was defineilty difficult, but it was a lot of fun and I thoughtly enjoyed it. It took me a minute the get how socekts and sending objects worked over network. There was definielty a learning curve getting the project started, but once I got into it it wasnt that bad. The Servent was realy interesting and I like the idea of having a system that can both connect and host as there are many practical applications for this structure. I had some issue keeping track of the game number in this and tried to use a hashMap to keeop track of unique clients being added to the server to itterate up the game number. The multithreading took me a little and Ive stared at this for so long that I am not sure if I got it fully implemented propperly but when a servent is connected to and hosting matches it seems like the output above should be somewhat accurate. It was a challenge and I liked it.
